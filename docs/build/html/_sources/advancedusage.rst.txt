Advanced usage
==============

Overview
--------
In the previous section, we have demonstrated how users can quickly set up and start using **SCOOTI**. In this section, we will show you how to take advantage of the flexibility of **SCOOTI** to support your research.



Identifying up- and down-regulated genes
----------------------------------------
SCOOTI relies on the results of flux prediction generated by metabolic modeling methods to infer objectives. Therefore, to prepare context-specific flux prediction based on omics data, we need to identify up- and down-regulated genes from data. The method is mainly designed for integrating transcriptomics and proteomics. Here, we provide three different ways users can consider for their own models.

No matter what types of method users are interested in, the initiation of the Python class `findSigGenes` is required to apply the analysis functions. 

.. code-block:: python
  
  # instance of the python class
  fr = findRegulators('./data/scEmbryo/GSE136714/single_cell/')



Convert single-cell data from table to 10x format
*************************************************
Single-cell data provide the information of expression uncertainty. No matter what type of single-cell data, such as scRNA-seq, single nucleus RNA-seq, and ATAC-seq, `findSigGenes` leveraging `scanpy` and `anndata` can convert data tables to 10x format which includes a sparse matrix of gene expression levels, gene names, and barcodes.

.. code-block:: python

    # single cell embryo path
    path = './data/GSE183852_humanHeartFailure/GSE183852_Integrated_Counts.csv.gz'
    # choose columns
    usecols = ['gene', 'TWCM-11-103', 'TWCM-13-285']
    # read data with chunks
    fr = findRegulators(path)
    fr.table_to_10xformat(
        sep='\t',
        transpose=False,
        chunksize=1000
    )

A similar function `df_to_10xformat` is designed to convert pandas dataframes to 10x format for which the step of reading tables is skipped. Thus, users need to read the data first.

.. code-block:: python

   # initialize the object
   fr = findSigGenes('./data/scEmbryo/GSE136714/single_cell/')
   # read data
   fr.read_scRNAseq()
   # get gene expression matrix
   gdf = fr.get_genedf(transpose=True)
   # convert data into the 10x format
   fr.df_to_10xformat(
           gdf,
           prefix='Embryo',
           )

Significant genes in bulk data
******************************

There are tons of methods used to identify significant genes from bulk omics data, such as DESeq, edgeR, DESeq2, sSeq, and EBSeq. Here, `findSigGenes` not only offers simplest methods like T-test with or without corrections but also integrates DESeq2 and EBSeq to identify significant genes with corresponding P-values and PPDE values.


Significant genes in single cells
*********************************

.. code-block:: python
  
  # instance of the python class
  fr = findRegulators('./data/scEmbryo/GSE136714/single_cell/')

  # read RNA-seq data
  fr.read_scRNAseq(
          folder='',
          rename_cellNames=False
          )
  # get gene expression
  gdf = fr.get_genedf(transpose=True)
  
  # get columns of interest
  cols = gdf.columns[
          pd.Series(gdf.columns).str.contains(
              'Zygote|2cell|32cell'
              )
          ]
  dfsel = gdf[cols]
  # find regulators
  fr = findRegulators('/nfs/turbo/umms-csriram/daweilin/data/scEmbryo/GSE136714/')
  # dataframe
  fr.df_to_10xformat(
          gdf,
          prefix='stageEmbryoKSOM',
          )
  zygote = dfsel.columns[
          pd.Series(dfsel.columns).str.contains(
              'Zygote'
              )
          ]
  twocell = dfsel.columns[
          pd.Series(dfsel.columns).apply(
              lambda x: x.split('_')[0]=='2cell'
              )
          ]
  
  bc = dfsel.columns[
          pd.Series(dfsel.columns).apply(
              lambda x: x.split('_')[0]=='32cell'
              )
          ]
  # get transition of expression between two states
  sc1C2C = transition_expression(dfsel[zygote], dfsel[twocell])
  sc2CBC = transition_expression(dfsel[twocell], dfsel[bc])
  # merge df
  mergedf = pd.concat((sc1C2C, sc2CBC), axis=1)
  # find regulators
  fr = findRegulators('/nfs/turbo/umms-csriram/daweilin/data/scEmbryo/GSE136714/')
  # dataframe
  fr.df_to_10xformat(
          mergedf,
          prefix='transitionEmbryoKSOM',
          )
  
  
  # single cell embryo path
  embryoSC_paths = '/nfs/turbo/umms-csriram/daweilin/data/scEmbryo/GSE136714/GSE136714_raw.xlsx'
  df = pd.read_excel(embryoSC_paths, index_col=0)
  # get columns of interest
  cols = df.columns[
          pd.Series(df.columns).str.contains(
              'Zygote|2cell|32cell'
              )
          ]
  dfsel = df[cols]
  # find regulators
  fr = findRegulators('/nfs/turbo/umms-csriram/daweilin/data/scEmbryo/GSE136714/')
  # dataframe
  fr.df_to_10xformat(
          dfsel,
          prefix='stageEmbryoKSOM',
          )
  zygote = dfsel.columns[
          pd.Series(dfsel.columns).str.contains(
              'Zygote'
              )
          ]
  twocell = dfsel.columns[
          pd.Series(dfsel.columns).apply(
              lambda x: x.split('_')[0]=='2cell'
              )
          ]
  
  bc = dfsel.columns[
          pd.Series(dfsel.columns).apply(
              lambda x: x.split('_')[0]=='32cell'
              )
          ]
  # get transition of expression between two states
  sc1C2C = transition_expression(dfsel[zygote], dfsel[twocell])
  sc2CBC = transition_expression(dfsel[twocell], dfsel[bc])
  # merge df
  mergedf = pd.concat((sc1C2C, sc2CBC), axis=1)
  # find regulators
  fr = findRegulators('/nfs/turbo/umms-csriram/daweilin/data/scEmbryo/GSE136714/')
  # dataframe
  fr.df_to_10xformat(
          mergedf,
          prefix='transitionEmbryoKSOM',
          )
  
  


Classification significant genes with Z-score and percentile
************************************************************
Again,

.. code-block:: bash

   #!/bin/bash
   # input settings
   # path to access your matlab-version cobratoolbox
   COBRA_path='./cobratoolbox/'
   # path to access the metabolic model
   GEM_path='./GEMs/Shen2019.mat'
   # name of the model
   model_name='Recon1'
   # file of the objective candidates including all metabolites from Recon1
   obj_candidate_list_file='./objALL_metabolites_recon1.csv'
   
   # path to access the significant genes data
   data_dir='./sigGenes/prolif_qui/'
   prefix_name='model' # name of the experiment pls set to 'model' for unconstraint models
   medium='DMEMF12' # KSOM for embryos and DMEMF12 for cell culture
   save_root_path='./fluxPrediction/unconstrained_models/pfba/' # path to save predicted fluxes

   # start the simulation of flux predictions
   matlab -nosplash -noFigureWindows -r "multiObj_CBM(~, $COBRA_path, $GEM_path, $model_name, $obj_candidate_list_file, $data_dir, $prefix_name, $medium, $save_root_path)"

Similar to what we have done for the models with 52 different metabolites, we have to couple these unconstrained models with omics-basd constrained models to infer metabolic objectives. Notably, the training time and the uncertainty of the coefficients will increase.



Consider more metabolites as single objectives
----------------------------------------------
We have demonstrated that we can infer metabolic objectives based on 52 different metabolites which are mostly considered in Recon1's biomass objective. However, users might be interested in other metabolites as single objectives. Therefore, this section will guide you to set up the models step by step.

Generate unconstrained models with more metabolites
***************************************************
Again, we need to firstly generate the unconstrained models as the variables for SCOOTI.

.. code-block:: bash

   #!/bin/bash
   # input settings
   # path to access your matlab-version cobratoolbox
   COBRA_path='./cobratoolbox/'
   # path to access the metabolic model
   GEM_path='./GEMs/Shen2019.mat'
   # name of the model
   model_name='Recon1'
   # file of the objective candidates including all metabolites from Recon1
   obj_candidate_list_file='./objALL_metabolites_recon1.csv'
   
   # path to access the significant genes data
   data_dir='./sigGenes/prolif_qui/'
   prefix_name='model' # name of the experiment pls set to 'model' for unconstraint models
   medium='DMEMF12' # KSOM for embryos and DMEMF12 for cell culture
   save_root_path='./fluxPrediction/unconstrained_models/pfba/' # path to save predicted fluxes

   # start the simulation of flux predictions
   matlab -nosplash -noFigureWindows -r "multiObj_CBM(~, $COBRA_path, $GEM_path, $model_name, $obj_candidate_list_file, $data_dir, $prefix_name, $medium, $save_root_path)"

Similar to what we have done for the models with 52 different metabolites, we have to couple these unconstrained models with omics-basd constrained models to infer metabolic objectives. Notably, the training time and the uncertainty of the coefficients will increase.

Generate unconstrained models with more metabolites
***************************************************
Again, we need to firstly generate the unconstrained models as the variables for SCOOTI.

.. code-block:: bash

   #!/bin/bash
   # input settings
   # path to access your matlab-version cobratoolbox
   COBRA_path='./cobratoolbox/'
   # path to access the metabolic model
   GEM_path='./GEMs/Shen2019.mat'
   # name of the model
   model_name='Recon1'
   # leave it blank if no user-defined objectives
   obj_candidate_list_file='./objALL_metabolites_recon1.csv'
   # objective values
   input_obj_tb=''
   
   # parameter settings
   DFA_kappa=-1
   CFR_kappa=0.1
   CFR_rho=10
   paraLen=1 # how many kappa/rho used for scanning
   random_para=0 # bool, 1 to enable random sampling
   init_objective=1 # 1 for none, 2 for biomass objective
   genekoflag=0 # bool
   rxnkoflag=0 # bool
   FVAflag=0 # bool
   pfba=1 # 0 for fba and 1 for pfba (minimize sum of fluxes)
   medium_perturbation=0 # 1 for depletion or excess of metabolites in medium
   pairwise_CFR_model=0
   algorithm='iMAT'

   # path to access the significant genes data
   data_dir='./sigGenes/prolif_qui/'
   prefix_name='model' # name of the experiment pls set to 'model' for unconstraint models
   medium='DMEMF12' # KSOM for embryos and DMEMF12 for cell culture
   late_stage='upgenes' # suffix of the file names of significant up-genes
   early_stage='dwgenes' # suffix of the file names of significant down-genes
   simulation='CFR' # CFR for transcriptomics and proteomics; DFA for metabolomics
   constraint=1 # apply constraints to the model
   save_root_path='./fluxPrediction/unconstrained_models/pfba/' # path to save predicted fluxes
   CFR_model_path=''

   
   run=1
   matlab -nosplash -noFigureWindows -r "multiObj_CBM($run, $DFA_kappa, $CFR_kappa, $CFR_rho, $COBRA_path,$GEM_path, $model_name, $obj_candidate_list_file, $input_obj_tb, $paraLen, $random_para, $init_objective, $genekoflag, $rxnkoflag, $FVAflag, $pfba, $medium_perturbation, $data_dir, $prefix_name, $medium, $late_stage, $early_stage, $simulation, $constraint, $save_root_path)"

